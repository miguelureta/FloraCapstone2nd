// <auto-generated />
using System;
using FloraCapstone2nd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FloraCapstone2nd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220707214521_AddIdentityTables")]
    partial class AddIdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FloraCapstone2nd.Model.AccountsAdmin", b =>
                {
                    b.Property<int>("AccountsAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExpertsModID")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MembersModID")
                        .HasColumnType("int");

                    b.Property<string>("ReportedUsers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatsID")
                        .HasColumnType("int");

                    b.HasKey("AccountsAdminId");

                    b.ToTable("accountsAdmins");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Advertisements", b =>
                {
                    b.Property<int>("AdsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClicksNum")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AdsId");

                    b.ToTable("advertisements");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Alarms", b =>
                {
                    b.Property<int>("AlarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlarmName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AlarmId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Bans", b =>
                {
                    b.Property<int>("BanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BanCount")
                        .HasColumnType("int");

                    b.Property<string>("BanDesc")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BanId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Bookmarks", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<int>("HowTosID")
                        .HasColumnType("int");

                    b.HasKey("BookmarkId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.ContentsAdmin", b =>
                {
                    b.Property<int>("ContentsAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdsID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<int>("ForumsModID")
                        .HasColumnType("int");

                    b.Property<int>("HowTosModID")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("StatsID")
                        .HasColumnType("int");

                    b.HasKey("ContentsAdminId");

                    b.ToTable("contentsAdmins");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.DiagnosticsAdmin", b =>
                {
                    b.Property<int>("DiagnosticsAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiagnosticsModID")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("PlantDiseaseID")
                        .HasColumnType("int");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<string>("ReportedUsers")
                        .HasColumnType("longtext");

                    b.Property<int>("StatsID")
                        .HasColumnType("int");

                    b.HasKey("DiagnosticsAdminId");

                    b.ToTable("diagnosticsAdmins");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.DiagnosticsMod", b =>
                {
                    b.Property<int>("DiagnosticsModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("PlantDiseaseID")
                        .HasColumnType("int");

                    b.Property<string>("ReportedUsers")
                        .HasColumnType("longtext");

                    b.HasKey("DiagnosticsModId");

                    b.ToTable("diagnosticsMods");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Experts", b =>
                {
                    b.Property<int>("ExpertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlarmID")
                        .HasColumnType("int");

                    b.Property<int>("HowTosID")
                        .HasColumnType("int");

                    b.Property<int>("RegulatoryID")
                        .HasColumnType("int");

                    b.Property<string>("UploadedProof")
                        .HasColumnType("longtext");

                    b.HasKey("ExpertId");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.ExpertsMod", b =>
                {
                    b.Property<int>("ExpertsModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExpertID")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.HasKey("ExpertsModId");

                    b.ToTable("expertsMods");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Forums", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ForumViewCount")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("ReplyID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ForumId");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.ForumsMod", b =>
                {
                    b.Property<int>("ForumsModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateDeactivated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.HasKey("ForumsModId");

                    b.ToTable("forumsMods");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.HeadAdmin", b =>
                {
                    b.Property<int>("HeadAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountsAdminID")
                        .HasColumnType("int");

                    b.Property<int>("ContentsAdminID")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosticsAdminID")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("StatsID")
                        .HasColumnType("int");

                    b.HasKey("HeadAdminId");

                    b.ToTable("headAdmins");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.HowTos", b =>
                {
                    b.Property<int>("HowTosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<string>("HowTosTitle")
                        .HasColumnType("longtext");

                    b.Property<int>("HowTosViewCount")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("HowTosId");

                    b.ToTable("howTos");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.HowTosMod", b =>
                {
                    b.Property<int>("HowTosModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HowTosID")
                        .HasColumnType("int");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("HowTosModId");

                    b.ToTable("HowTosMods");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Members", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlarmID")
                        .HasColumnType("int");

                    b.Property<int>("BookmarkID")
                        .HasColumnType("int");

                    b.Property<int>("RegulatoryID")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.MembersMod", b =>
                {
                    b.Property<int>("MembersModId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.HasKey("MembersModId");

                    b.ToTable("membersMods");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.PlantDiseases", b =>
                {
                    b.Property<int>("PlantDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffectedPart")
                        .HasColumnType("longtext");

                    b.Property<float>("CurePriceAvg")
                        .HasColumnType("float");

                    b.Property<string>("DiseaseCause")
                        .HasColumnType("longtext");

                    b.Property<string>("DiseaseCure")
                        .HasColumnType("longtext");

                    b.Property<string>("DiseaseDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("DiseaseSymptoms")
                        .HasColumnType("longtext");

                    b.Property<string>("Media")
                        .HasColumnType("longtext");

                    b.Property<string>("PlantDiseaseName")
                        .HasColumnType("longtext");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.HasKey("PlantDiseaseId");

                    b.ToTable("PlantDiseases");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Plants", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PlantDesc")
                        .HasColumnType("longtext");

                    b.Property<int>("PlantDiseaseID")
                        .HasColumnType("int");

                    b.Property<string>("PlantName")
                        .HasColumnType("longtext");

                    b.Property<string>("PlantType")
                        .HasColumnType("longtext");

                    b.Property<string>("ScientificName")
                        .HasColumnType("longtext");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.RegulatoryInfo", b =>
                {
                    b.Property<int>("RegulatoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BanID")
                        .HasColumnType("int");

                    b.Property<int>("WarnID")
                        .HasColumnType("int");

                    b.HasKey("RegulatoryId");

                    b.ToTable("regulatoryInfos");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Replies", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReplyText")
                        .HasColumnType("longtext");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReplyId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Roles", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.HasKey("RolesId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Statistics", b =>
                {
                    b.Property<int>("StatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BannedUsersCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserTotalCount")
                        .HasColumnType("int");

                    b.HasKey("StatsId");

                    b.ToTable("statistics");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Subscriptions", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentAccNum")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime>("SubscriptionLength")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubscriptionPrice")
                        .HasColumnType("int");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("longtext");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FloraCapstone2nd.Model.Warns", b =>
                {
                    b.Property<int>("WarnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WarnCount")
                        .HasColumnType("int");

                    b.Property<string>("WarnDesc")
                        .HasColumnType("longtext");

                    b.HasKey("WarnId");

                    b.ToTable("Warns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
